# Â© George Lynch, September, 2018
from tkinter import *
import random

'''
The fractal that is demonstrated in this program is generated by
Randomly picking one corner of a triangle, and then moving halfway
towards it. If you repeat this process of picking a corner and
moving halfway towards it many times, an image will generate that
looks similar to Sierpinski's triangle. Good numbers to try out
first when running the program would be 1000 dots, and a radius of 3.
'''


#Prompts for user input
print('''This program is designed to make a cool fractal by randomly
placing dots in accordance to each corner of a triangle.
Enter the number of dots:''')
numDots = int(input())
print("Please enter the radius of the dots (in pixels):")
dotRadius = int(input())

#sets up tkinter object
tk = Tk()
tk.title("Chaos Game")
tk.resizable(0,0)
tk.wm_attributes("-topmost", 1)

#creates canvas object
canvas = Canvas(tk, width = 700, height = 700, bd = 0, highlightthickness = 0)
canvas.pack()
tk.update()

#defines color palette
palette = ["#fd4445", "#ffaf00", "#0091cf", "#01395e"]


#sets up corner dots
corners = ["red", "green", "blue"]
redDot = canvas.create_oval(350 - dotRadius, 100 - dotRadius, 350 + dotRadius, 100 + dotRadius, fill = "red", outline = "red")
greenDot = canvas.create_oval(61 - dotRadius, 600 - dotRadius, 61 + dotRadius, 600 + dotRadius, fill = "green", outline = "green")
blueDot = canvas.create_oval(639 - dotRadius, 600 - dotRadius, 639 + dotRadius, 600 + dotRadius, fill = "blue", outline = "blue")

#places first dot and creates variables
color = palette[(random.randint(0, 3))]
firstDotX = 350
firstDotY = 100
firstDot = canvas.create_oval(firstDotX - dotRadius, firstDotY - dotRadius, firstDotX + dotRadius, firstDotY + dotRadius, fill = color, outline = color)

#creates as many dots as user specifies    
for i in range(numDots):

    #picks corner & color
    pickedCorner = corners[random.randint(0, 2)]
    colorOfDot = palette[(random.randint(0, 3))]

    #moves halfway to picked corner
    if pickedCorner == "red":
        firstDotX = (firstDotX + 350) / 2
        firstDotY = (firstDotY + 100) / 2
    elif pickedCorner == "green":
        firstDotX = (firstDotX +61) / 2
        firstDotY = (firstDotY + 600) / 2
    elif pickedCorner == "blue":
        firstDotX = (firstDotX + 639) / 2
        firstDotY = (firstDotY + 600) / 2

    #draws point
    canvas.create_oval(firstDotX - dotRadius, firstDotY - dotRadius, firstDotX + dotRadius, firstDotY + dotRadius, fill = colorOfDot, outline = colorOfDot)
    tk.update()
